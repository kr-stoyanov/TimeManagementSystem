@page "/addtimecard"

@inject NavigationManager NavigationManager
@inject IAddTimeCardUseCase AddTimeCardUseCase
@inject IEnumHelperUseCase EnumHelperUseCase

<h3>Add Time Card</h3>

@if (timeCard != null)
{
    <EditForm Model="timeCard" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>
        <div class="form-group">
            <label for="username">Username</label>
            <text id="username">@userName</text>
        </div>
        <div class="form-group">
            <label for="project">Project</label>
            <InputText id="project" @bind-Value="timeCard.ProjectName" class="form-control"></InputText>
        </div>
        <div class="form-group">
            <label for="task">Task</label>
            <InputText id="task" @bind-Value="timeCard.TaskName" class="form-control"></InputText>
        </div>
        <div class="form-group">
            <label for="notes">Notes</label>
            <InputText id="notes" @bind-Value="timeCard.Notes" class="form-control"></InputText>
        </div>
        <div class="form-group">
            <label for="status">Status</label>
            <InputSelect id="status" @bind-Value="timeCard.Status" class="form-control">
                @foreach (var status in Enum.GetValues(typeof(TimeCardStatus)))
                {
                    <option value="@status">@EnumHelperUseCase.GetStatusDisplayName((TimeCardStatus)status)</option>
                }
        </InputSelect>
    </div>
    <hr />
    <div class="form-group">
        <button type="submit" class="btn btn-primary">Save</button>
        <button type="button" class="btn btn-light" @onclick="OnCancel">Cancel</button>
    </div>
</EditForm>
}


@code {

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }

    private TimeCardViewModel? timeCard;

    private string? createdBy;

    private string userName;

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        this.timeCard = new TimeCardViewModel();

        var authState = await AuthenticationState;
        createdBy = $"{authState?.User?.Claims?.FirstOrDefault(x => x.Type == "firstName")?.Value} {authState?.User?.Claims?.FirstOrDefault(x => x.Type == "lastName")?.Value}";
        userName = authState?.User?.Identity?.Name;
    }

    private void OnValidSubmit()
    {
        this.timeCard.CreatedOn = DateTime.Now;
        this.timeCard.LastModifiedOn = DateTime.Now;
        this.timeCard.CreatedBy = createdBy;
        this.timeCard.UserName = userName;

        AddTimeCardUseCase.Execute(this.timeCard.Transform());
        NavigationManager.NavigateTo("/timecards");
    }

    private void OnCancel()
    {
        NavigationManager.NavigateTo("/timecards");
    }
}
