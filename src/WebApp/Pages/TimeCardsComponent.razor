@page "/timecards"

@inject NavigationManager NavigationManager
@inject IViewTimeCardsUseCase ViewTimeCardsUseCase
@inject IGetTimeCardByIdUseCase GetTimeCardById
@inject IEditTimeCardUseCase EditTimeCardUseCase
@inject IEnumHelperUseCase EnumHelperUseCase

<h3>View Time Cards</h3>

@if (timeCards != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Username</th>
                <th>Project</th>
                <th>Task</th>
                <th>Notes</th>
                <th>Status</th>
                <th>Time Spent</th>
                <th>Created On</th>
                <th>Last Modified On</th>
                <th>Edit</th>
                <th colspan=6>Timer</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var card in timeCards)
            {
                <tr>
                    <td>@card.UserName</td>
                    <td>@card.ProjectName</td>
                    <td>@card.TaskName</td>
                    <td>@card.Notes</td>
                    <td>@EnumHelperUseCase.GetStatusDisplayName(card.Status)</td>
                    <td>@card.TimeSpent.Hours hrs : @card.TimeSpent.Minutes min : @card.TimeSpent.Seconds sec</td>
                    <td>@card.CreatedOn.ToString("ddd, dd MMMM yyyy - hh:mm:ss tt")</td>
                    <td>@card.LastModifiedOn.ToString("ddd, dd MMMM yyyy - hh:mm:ss tt")</td>
                    <td><button type="button" data-toggle="tooltip" title="Edit" @onclick="@(() => EditTimeCard(card.Id))" class="btn btn-primary oi oi-pencil"></button></td>
                    <td><button type="button" data-toggle="tooltip" title="Start" @onclick="@(async () =>  { ChangeStatus(card, "InProgress");  UpdateTimeCard(card); await StopWatch(card); })" class="btn btn-success oi oi-media-play"></button></td>
                    <td><button type="button" data-toggle="tooltip" title="Pause" @onclick="@(() => { card.IsRunning = false; })" class="btn btn-light oi oi-media-pause"></button></td>
                    <td><button type="button" data-toggle="tooltip" title="Resume" @onclick="@(async () =>  { await StopWatch(card); })" class="btn btn-light oi oi-media-step-forward"></button></td>
                    <td><button type="button" data-toggle="tooltip" title="Stop" @onclick="@(() => { card.IsRunning = false; ChangeStatus(card, "Done"); UpdateTimeCard(card); card.StopwatchValue = new TimeSpan(); })" class="btn btn-danger oi oi-media-stop"></button></td>
                    <td><div>@card.StopwatchValue</div></td>
                </tr>
            }
        </tbody>
    </table>
}
<br />
<button class="btn btn-primary" @onclick="OnClickAddTimeCard">Add Time Card</button>


@code {
    private List<TimeCard>? timeCards;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        timeCards = ViewTimeCardsUseCase.Execute()?.ToList();
    }

    private void OnClickAddTimeCard()
    {
        NavigationManager.NavigateTo("/addtimecard");
    }

    private void EditTimeCard(string id)
    {
        NavigationManager.NavigateTo($"/edittimecard/{id}");
    }

    private async Task StopWatch(TimeCard timeCard)
    {
        timeCard.IsRunning = true;
        while (timeCard.IsRunning)
        {
            await Task.Delay(1000);
            if (timeCard.IsRunning)
            {
                timeCard.StopwatchValue = timeCard.StopwatchValue.Add(new TimeSpan(0, 0, 1));
                StateHasChanged();
            }
        }
    }

    private void UpdateTimeCard(TimeCard timeCard)
    {
        timeCard.TimeSpent += timeCard.StopwatchValue;
        timeCard.LastModifiedOn = DateTime.Now;
        EditTimeCardUseCase.Execute(timeCard);
        StateHasChanged();
    }

    private void ChangeStatus(TimeCard timeCard, string status)
    {
        var newStatus = (TimeCardStatus)Enum.Parse(typeof(TimeCardStatus), status);
        timeCard.Status = newStatus;
        StateHasChanged();
    }
}
