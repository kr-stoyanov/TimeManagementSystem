@page "/history"

@inject NavigationManager NavigationManager
@inject IEnumHelperUseCase EnumHelperUseCase
@inject IEditTimeCardUseCase EditTimeCardUseCase
@inject ITimeCardHistoryUseCase TimeCardHistoryUseCase

<h3>History</h3>

@if (timeCards != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Username</th>
                <th>Project</th>
                <th>Task</th>
                <th>Notes</th>
                <th>Status</th>
                <th>Time Spent</th>
                <th>Created On</th>
                <th>Closed On</th>
                <th>Reopen</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var card in timeCards)
            {
                <tr>
                    <td>@card.UserName</td>
                    <td>@card.ProjectName</td>
                    <td>@card.TaskName</td>
                    <td>@card.Notes</td>
                    <td>@EnumHelperUseCase.GetStatusDisplayName(card.Status)</td>
                    <td>@card.TimeSpent.Hours hrs : @card.TimeSpent.Minutes min : @card.TimeSpent.Seconds sec</td>
                    <td>@card.CreatedOn.ToString("ddd, dd MMMM yyyy - hh:mm:ss tt")</td>
                    <td>@card.ClosedOn.ToString("ddd, dd MMMM yyyy - hh:mm:ss tt")</td>
                    <th><button type="button" data-toggle="tooltip" title="Reopen" @onclick="@(() => Reopen(card))" class="btn btn-success oi oi-reload"></button></th>
                </tr>
            }
        </tbody>
    </table>
}
<br />
<button class="btn btn-light" @onclick="@(() => OnBack())">Back</button>

@code {
    private List<TimeCard>? timeCardsDb;
    private List<TimeCardViewModel>? timeCards;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        timeCardsDb = TimeCardHistoryUseCase.Execute()?.ToList();
        MapModels();
        StateHasChanged();
    }

    private void MapModels()
    {
        if (timeCardsDb != null)
        {
              this.timeCards = this.timeCardsDb
                                .Select(x => new TimeCardViewModel
                                    {
                                        Id = x.Id,
                                        UserName = x.UserName,
                                        ProjectName = x.ProjectName,
                                        TaskName = x.TaskName,
                                        Notes = x.Notes,
                                        Status = x.Status,
                                        TimeSpent = x.TimeSpent,
                                        CreatedOn = x.CreatedOn,
                                        LastModifiedOn = x.LastModifiedOn,
                                        ClosedOn = x.ClosedOn,
                                        IsRunning = false,
                                        StopwatchValue = new TimeSpan(),
                                    }).ToList();
        }
    }

    private void Reopen(TimeCardViewModel timeCard)
    {
        timeCard.Status = TimeCardStatus.Open;
        timeCard.LastModifiedOn = DateTime.Now;
        EditTimeCardUseCase.Execute(timeCard.Transform());
        StateHasChanged();
        OnInitialized();
    }
    private void OnBack()
    {
        NavigationManager.NavigateTo("/timecards");
    }
}
